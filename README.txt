Οδηγίες:
 
Για το GAP (dimer only)
 
Συνολικά έχουμε 7400 frames από την προσομοίωση μας: για τα coordinates of atomistic particles βρίσκονται στο αρχείο ‘out_xxp.dat’ και οι αντίστοιχες δυνάμεις στο αρχείο ‘out_ff_nb.dat’   . Πρώτο βήμα είναι να είναι γίνει το mapping από atomistic σε coarse-grained particles. Κάθε sample αποτελείται από  2560 atomistic particles και τα CG particles που θα προκύψουν θα είναι σε αριθμό 512 για κάθε sample. Οπότε δίνουμε την εντολή
•	python3 map_AT_to_CG.py
Στη συνέχεια σκοπός μας είναι να επιλέξουμε τις παραμέτρους για το μοντέλο μας ή τα μοντέλα μας. Στο αρχείο ‘params.py’ κάποιες παράμετροι είναι σε μορφή array, το οποίο μας επιτρέπει να τρέξουμε πολλά μοντέλα μαζί. Επιλέγουμε επίσης πόσα frames θέλουμε (μεταβλητή max_frames) και ποια μέθοδο θέλουμε (kernels, splines ή LJ). Οπότε αφού επιλέξουμε τις παραμέτρους που θέλουμε δίνουμε την εντολή
•	python3 run_multipl.py 
Σε αυτό το αρχείο καλούνται 3 βασικά αρχεία, prepare.py , sep_train_test.py  και GAP_train.py . Kυρίως το prepare.py καθυστερεί να κατασκευάσει τους πίνακες (περιγραφείς). Επιπλέον φτιάχνει τa basis points για τα οποία χρειάζομαι το rcut που χρησιμοποιήθηκε από τις προσομοιώσεις (10 με 12 angstrom). Και για το πρωτο point χρειάζεται να ξέρω την ελάχιστη απόσταση που μπορούν να φτάσουν 2 σωματίδια. Για 500 προσομοιώσεις βρήκα την ελάχιστη απόσταση και την χρησιμοποίησα για τα basis points. Min_distance=  0.32782924061163327
 
Μετά που θα τελειώσει το prepare.py τρέχει το sep_train_test.py. Αυτό θα χωρίσει τα 300 ας πούμε frames σε 90% training και 10% test frames. 
 
Τέλος, ακολουθεί το GAP_train.py. Υπολογίζει και αποθηκεύει σε αρχείο (saves) τις optimization παραμέτρους ‘a’ σύμφωνα με τα normal equations.  Επίσης αποθηκεύει και τους πίνακες περιγραφείς στο φάκελο save_kernels . Κατασκευάζει διάφορα διαγράμματα και υπολογίζει τις 2 μετρικές (Wasserstein and Chi-square)(‘ 0Chi-Square.txt’, ‘0Wasserstein_distance_new.txt’). 

Μπορούμε να τρέξουμε το αρχείο 
•	python3 make_plots.py
για να συγκρίνουμε τα μοντέλα που έχουμε τρέξει μέχρι τώρα και να τα ταξινομήσουμε με βάση τα Wasserstein and Chi-square measurements. 

Επίσης υπάρχει και το αρχείο 
•	python3 conv_F_to_U.py
Στο οποίο μπορούμε και μετατρέπουμε τα pair forces (φάκελος data_Fp)  σε pair potential (φάκελος data_Up) και να κάνουμε ένα αντίστοιχο για τo potential μέσω του αρχείου make_plots.py  καλώντας την συνάρτηση Compare_best_models_u. 

Για το GAP (trimer only)

To prepare του kernel(trimer) matrix είναι έτοιμο, απλά πολυ χρονοβόρο (για 5 samples χρειάζεται 2,5 μέρες). Και για το αρχείο sep_train_test.py ισχυει το ίδιο, δηλαδή είναι έτοιμο (όχι χρονοβόρο). Το 3ο αρχείο train_GAP δεν υπάρχει καθώς δεν ύπηρχε αρκετός χρόνος για την υλοποιηση του, η οποία θα βασιζόταν στην χρήση του best GAP(dimer) model. 
